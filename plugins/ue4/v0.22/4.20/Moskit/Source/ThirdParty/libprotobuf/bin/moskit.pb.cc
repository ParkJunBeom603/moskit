// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moskit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "moskit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MSAnalyzer {
namespace MOSKIT_UNITY_LIB {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultAnalysis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultAnalysis_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArrayScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArrayScene_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_moskit_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_moskit_2eproto() {
  protobuf_AddDesc_moskit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "moskit.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::internal_default_instance(),
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_),
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_));
  Transform_descriptor_ = file->message_type(1);
  static const int Transform_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, eulerangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, angularvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, parent_),
  };
  Transform_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform_descriptor_,
      Transform::internal_default_instance(),
      Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_),
      -1,
      -1,
      sizeof(Transform),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_));
  MainCamera_descriptor_ = file->message_type(2);
  static const int MainCamera_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, hitpoint_),
  };
  MainCamera_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MainCamera_descriptor_,
      MainCamera::internal_default_instance(),
      MainCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, _has_bits_),
      -1,
      -1,
      sizeof(MainCamera),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainCamera, _internal_metadata_));
  Time_descriptor_ = file->message_type(3);
  static const int Time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, deltatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, framecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, time_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::internal_default_instance(),
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_),
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_));
  GameObject_descriptor_ = file->message_type(4);
  static const int GameObject_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, isstatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, strtype_),
  };
  GameObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameObject_descriptor_,
      GameObject::internal_default_instance(),
      GameObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _has_bits_),
      -1,
      -1,
      sizeof(GameObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameObject, _internal_metadata_));
  Scene_descriptor_ = file->message_type(5);
  static const int Scene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, strindicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, list_gameobject_),
  };
  Scene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scene_descriptor_,
      Scene::internal_default_instance(),
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_),
      -1,
      -1,
      sizeof(Scene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _internal_metadata_));
  ResultAnalysis_descriptor_ = file->message_type(6);
  static const int ResultAnalysis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultAnalysis, list_obj_),
  };
  ResultAnalysis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultAnalysis_descriptor_,
      ResultAnalysis::internal_default_instance(),
      ResultAnalysis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultAnalysis, _has_bits_),
      -1,
      -1,
      sizeof(ResultAnalysis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultAnalysis, _internal_metadata_));
  ArrayScene_descriptor_ = file->message_type(7);
  static const int ArrayScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayScene, list_scene_),
  };
  ArrayScene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArrayScene_descriptor_,
      ArrayScene::internal_default_instance(),
      ArrayScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayScene, _has_bits_),
      -1,
      -1,
      sizeof(ArrayScene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArrayScene, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_moskit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, Vector3::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform_descriptor_, Transform::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MainCamera_descriptor_, MainCamera::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, Time::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameObject_descriptor_, GameObject::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scene_descriptor_, Scene::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultAnalysis_descriptor_, ResultAnalysis::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArrayScene_descriptor_, ArrayScene::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_moskit_2eproto() {
  Vector3_default_instance_.Shutdown();
  delete Vector3_reflection_;
  Transform_default_instance_.Shutdown();
  delete Transform_reflection_;
  MainCamera_default_instance_.Shutdown();
  delete MainCamera_reflection_;
  Time_default_instance_.Shutdown();
  delete Time_reflection_;
  GameObject_default_instance_.Shutdown();
  delete GameObject_reflection_;
  Scene_default_instance_.Shutdown();
  delete Scene_reflection_;
  ResultAnalysis_default_instance_.Shutdown();
  delete ResultAnalysis_reflection_;
  ArrayScene_default_instance_.Shutdown();
  delete ArrayScene_reflection_;
}

void protobuf_InitDefaults_moskit_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector3_default_instance_.DefaultConstruct();
  Transform_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MainCamera_default_instance_.DefaultConstruct();
  Time_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GameObject_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Scene_default_instance_.DefaultConstruct();
  ResultAnalysis_default_instance_.DefaultConstruct();
  ArrayScene_default_instance_.DefaultConstruct();
  Vector3_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform_default_instance_.get_mutable()->InitAsDefaultInstance();
  MainCamera_default_instance_.get_mutable()->InitAsDefaultInstance();
  Time_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameObject_default_instance_.get_mutable()->InitAsDefaultInstance();
  Scene_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResultAnalysis_default_instance_.get_mutable()->InitAsDefaultInstance();
  ArrayScene_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_moskit_2eproto_once_);
void protobuf_InitDefaults_moskit_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_moskit_2eproto_once_,
                 &protobuf_InitDefaults_moskit_2eproto_impl);
}
void protobuf_AddDesc_moskit_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_moskit_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014moskit.proto\022\033MSAnalyzer.MOSKIT_UNITY_"
    "LIB\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001"
    "z\030\003 \001(\002\"\271\002\n\tTransform\0229\n\013eulerAngles\030\001 \001"
    "(\0132$.MSAnalyzer.MOSKIT_UNITY_LIB.Vector3"
    "\0226\n\010position\030\002 \001(\0132$.MSAnalyzer.MOSKIT_U"
    "NITY_LIB.Vector3\022=\n\017angularVelocity\030\003 \001("
    "\0132$.MSAnalyzer.MOSKIT_UNITY_LIB.Vector3\022"
    "3\n\005scale\030\004 \001(\0132$.MSAnalyzer.MOSKIT_UNITY"
    "_LIB.Vector3\0225\n\007forward\030\005 \001(\0132$.MSAnalyz"
    "er.MOSKIT_UNITY_LIB.Vector3\022\016\n\006parent\030\006 "
    "\001(\005\"\315\001\n\nMainCamera\022\014\n\004name\030\001 \001(\t\022\016\n\006acti"
    "ve\030\002 \001(\010\022\r\n\005layer\030\003 \001(\005\022\022\n\ninstanceID\030\004 "
    "\001(\005\022\013\n\003tag\030\005 \001(\t\0229\n\ttransform\030\006 \001(\0132&.MS"
    "Analyzer.MOSKIT_UNITY_LIB.Transform\0226\n\010h"
    "itpoint\030\007 \001(\0132$.MSAnalyzer.MOSKIT_UNITY_"
    "LIB.Vector3\";\n\004Time\022\021\n\tdeltaTime\030\001 \001(\002\022\022"
    "\n\nframeCount\030\002 \001(\005\022\014\n\004time\030\003 \001(\002\"\270\001\n\nGam"
    "eObject\022\014\n\004name\030\001 \001(\t\022\016\n\006active\030\002 \001(\010\022\020\n"
    "\010isStatic\030\003 \001(\010\022\r\n\005layer\030\004 \001(\005\022\022\n\ninstan"
    "ceID\030\005 \001(\005\022\013\n\003tag\030\006 \001(\t\0229\n\ttransform\030\007 \001"
    "(\0132&.MSAnalyzer.MOSKIT_UNITY_LIB.Transfo"
    "rm\022\017\n\007strType\030\010 \001(\t\"\310\001\n\005Scene\022\023\n\013strIndi"
    "cate\030\001 \001(\t\022/\n\004time\030\002 \001(\0132!.MSAnalyzer.MO"
    "SKIT_UNITY_LIB.Time\0227\n\006Camera\030\003 \001(\0132\'.MS"
    "Analyzer.MOSKIT_UNITY_LIB.MainCamera\022@\n\017"
    "list_gameObject\030\004 \003(\0132\'.MSAnalyzer.MOSKI"
    "T_UNITY_LIB.GameObject\"K\n\016ResultAnalysis"
    "\0229\n\010list_obj\030\001 \003(\0132\'.MSAnalyzer.MOSKIT_U"
    "NITY_LIB.GameObject\"D\n\nArrayScene\0226\n\nlis"
    "t_Scene\030\001 \003(\0132\".MSAnalyzer.MOSKIT_UNITY_"
    "LIB.Scene", 1209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "moskit.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_moskit_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_moskit_2eproto_once_);
void protobuf_AddDesc_moskit_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_moskit_2eproto_once_,
                 &protobuf_AddDesc_moskit_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_moskit_2eproto {
  StaticDescriptorInitializer_moskit_2eproto() {
    protobuf_AddDesc_moskit_2eproto();
  }
} static_descriptor_initializer_moskit_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3> Vector3_default_instance_;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
    UnsafeMergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3::UnsafeMergeFrom(const Vector3& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional float x = 1;
bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector3::x() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.x)
  return x_;
}
void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.x)
}

// optional float y = 2;
bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector3::y() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.y)
  return y_;
}
void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.y)
}

// optional float z = 3;
bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector3::z() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.z)
  return z_;
}
void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Vector3.z)
}

inline const Vector3* Vector3::internal_default_instance() {
  return &Vector3_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kEulerAnglesFieldNumber;
const int Transform::kPositionFieldNumber;
const int Transform::kAngularVelocityFieldNumber;
const int Transform::kScaleFieldNumber;
const int Transform::kForwardFieldNumber;
const int Transform::kParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
}

void Transform::InitAsDefaultInstance() {
  eulerangles_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
  position_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
  angularvelocity_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
  scale_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
  forward_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
}

Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  eulerangles_ = NULL;
  position_ = NULL;
  angularvelocity_ = NULL;
  scale_ = NULL;
  forward_ = NULL;
  parent_ = 0;
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  if (this != &Transform_default_instance_.get()) {
    delete eulerangles_;
    delete position_;
    delete angularvelocity_;
    delete scale_;
    delete forward_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform_descriptor_;
}

const Transform& Transform::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform> Transform_default_instance_;

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  Transform* n = new Transform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_eulerangles()) {
      if (eulerangles_ != NULL) eulerangles_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
    if (has_angularvelocity()) {
      if (angularvelocity_ != NULL) angularvelocity_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
    if (has_forward()) {
      if (forward_ != NULL) forward_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
    parent_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 eulerAngles = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eulerangles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_angularVelocity;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 angularVelocity = 3;
      case 3: {
        if (tag == 26) {
         parse_angularVelocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angularvelocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scale;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 scale = 4;
      case 4: {
        if (tag == 34) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_forward;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 forward = 5;
      case 5: {
        if (tag == 42) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_parent;
        break;
      }

      // optional int32 parent = 6;
      case 6: {
        if (tag == 48) {
         parse_parent:
          set_has_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 eulerAngles = 1;
  if (has_eulerangles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->eulerangles_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 angularVelocity = 3;
  if (has_angularvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angularvelocity_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->scale_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 forward = 5;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->forward_, output);
  }

  // optional int32 parent = 6;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->parent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 eulerAngles = 1;
  if (has_eulerangles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->eulerangles_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 angularVelocity = 3;
  if (has_angularvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angularvelocity_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->scale_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 forward = 5;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->forward_, false, target);
  }

  // optional int32 parent = 6;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->parent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 eulerAngles = 1;
    if (has_eulerangles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eulerangles_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 angularVelocity = 3;
    if (has_angularvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angularvelocity_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 scale = 4;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scale_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 forward = 5;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_);
    }

    // optional int32 parent = 6;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
    UnsafeMergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform::UnsafeMergeFrom(const Transform& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eulerangles()) {
      mutable_eulerangles()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.eulerangles());
    }
    if (from.has_position()) {
      mutable_position()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.position());
    }
    if (from.has_angularvelocity()) {
      mutable_angularvelocity()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.angularvelocity());
    }
    if (from.has_scale()) {
      mutable_scale()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.scale());
    }
    if (from.has_forward()) {
      mutable_forward()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.forward());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Transform)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform::IsInitialized() const {

  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  std::swap(eulerangles_, other->eulerangles_);
  std::swap(position_, other->position_);
  std::swap(angularvelocity_, other->angularvelocity_);
  std::swap(scale_, other->scale_);
  std::swap(forward_, other->forward_);
  std::swap(parent_, other->parent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform_descriptor_;
  metadata.reflection = Transform_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 eulerAngles = 1;
bool Transform::has_eulerangles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transform::set_has_eulerangles() {
  _has_bits_[0] |= 0x00000001u;
}
void Transform::clear_has_eulerangles() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transform::clear_eulerangles() {
  if (eulerangles_ != NULL) eulerangles_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_eulerangles();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& Transform::eulerangles() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.eulerAngles)
  return eulerangles_ != NULL ? *eulerangles_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::mutable_eulerangles() {
  set_has_eulerangles();
  if (eulerangles_ == NULL) {
    eulerangles_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.eulerAngles)
  return eulerangles_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::release_eulerangles() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.eulerAngles)
  clear_has_eulerangles();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = eulerangles_;
  eulerangles_ = NULL;
  return temp;
}
void Transform::set_allocated_eulerangles(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* eulerangles) {
  delete eulerangles_;
  eulerangles_ = eulerangles;
  if (eulerangles) {
    set_has_eulerangles();
  } else {
    clear_has_eulerangles();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.eulerAngles)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 position = 2;
bool Transform::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transform::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Transform::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transform::clear_position() {
  if (position_ != NULL) position_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_position();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& Transform::position() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.position)
  return position_ != NULL ? *position_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.position)
  return position_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::release_position() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.position)
  clear_has_position();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void Transform::set_allocated_position(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.position)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 angularVelocity = 3;
bool Transform::has_angularvelocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transform::set_has_angularvelocity() {
  _has_bits_[0] |= 0x00000004u;
}
void Transform::clear_has_angularvelocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transform::clear_angularvelocity() {
  if (angularvelocity_ != NULL) angularvelocity_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_angularvelocity();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& Transform::angularvelocity() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.angularVelocity)
  return angularvelocity_ != NULL ? *angularvelocity_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::mutable_angularvelocity() {
  set_has_angularvelocity();
  if (angularvelocity_ == NULL) {
    angularvelocity_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.angularVelocity)
  return angularvelocity_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::release_angularvelocity() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.angularVelocity)
  clear_has_angularvelocity();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = angularvelocity_;
  angularvelocity_ = NULL;
  return temp;
}
void Transform::set_allocated_angularvelocity(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* angularvelocity) {
  delete angularvelocity_;
  angularvelocity_ = angularvelocity;
  if (angularvelocity) {
    set_has_angularvelocity();
  } else {
    clear_has_angularvelocity();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.angularVelocity)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 scale = 4;
bool Transform::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transform::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void Transform::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transform::clear_scale() {
  if (scale_ != NULL) scale_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_scale();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& Transform::scale() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.scale)
  return scale_ != NULL ? *scale_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) {
    scale_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.scale)
  return scale_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::release_scale() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.scale)
  clear_has_scale();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
void Transform::set_allocated_scale(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.scale)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 forward = 5;
bool Transform::has_forward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transform::set_has_forward() {
  _has_bits_[0] |= 0x00000010u;
}
void Transform::clear_has_forward() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transform::clear_forward() {
  if (forward_ != NULL) forward_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_forward();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& Transform::forward() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.forward)
  return forward_ != NULL ? *forward_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.forward)
  return forward_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* Transform::release_forward() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.forward)
  clear_has_forward();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = forward_;
  forward_ = NULL;
  return temp;
}
void Transform::set_allocated_forward(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.forward)
}

// optional int32 parent = 6;
bool Transform::has_parent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transform::set_has_parent() {
  _has_bits_[0] |= 0x00000020u;
}
void Transform::clear_has_parent() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transform::clear_parent() {
  parent_ = 0;
  clear_has_parent();
}
::google::protobuf::int32 Transform::parent() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.parent)
  return parent_;
}
void Transform::set_parent(::google::protobuf::int32 value) {
  set_has_parent();
  parent_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Transform.parent)
}

inline const Transform* Transform::internal_default_instance() {
  return &Transform_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainCamera::kNameFieldNumber;
const int MainCamera::kActiveFieldNumber;
const int MainCamera::kLayerFieldNumber;
const int MainCamera::kInstanceIDFieldNumber;
const int MainCamera::kTagFieldNumber;
const int MainCamera::kTransformFieldNumber;
const int MainCamera::kHitpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainCamera::MainCamera()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
}

void MainCamera::InitAsDefaultInstance() {
  transform_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::internal_default_instance());
  hitpoint_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance());
}

MainCamera::MainCamera(const MainCamera& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
}

void MainCamera::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_ = NULL;
  hitpoint_ = NULL;
  ::memset(&active_, 0, reinterpret_cast<char*>(&instanceid_) -
    reinterpret_cast<char*>(&active_) + sizeof(instanceid_));
}

MainCamera::~MainCamera() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  SharedDtor();
}

void MainCamera::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MainCamera_default_instance_.get()) {
    delete transform_;
    delete hitpoint_;
  }
}

void MainCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainCamera_descriptor_;
}

const MainCamera& MainCamera::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MainCamera> MainCamera_default_instance_;

MainCamera* MainCamera::New(::google::protobuf::Arena* arena) const {
  MainCamera* n = new MainCamera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MainCamera, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MainCamera*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(active_, instanceid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tag()) {
      tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_transform()) {
      if (transform_ != NULL) transform_->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::Clear();
    }
    if (has_hitpoint()) {
      if (hitpoint_ != NULL) hitpoint_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MainCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (tag == 16) {
         parse_active:
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }

      // optional int32 layer = 3;
      case 3: {
        if (tag == 24) {
         parse_layer:
          set_has_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_instanceID;
        break;
      }

      // optional int32 instanceID = 4;
      case 4: {
        if (tag == 32) {
         parse_instanceID:
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        break;
      }

      // optional string tag = 5;
      case 5: {
        if (tag == 42) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transform;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 6;
      case 6: {
        if (tag == 50) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hitpoint;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 hitpoint = 7;
      case 7: {
        if (tag == 58) {
         parse_hitpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  return false;
#undef DO_
}

void MainCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional int32 layer = 3;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->layer(), output);
  }

  // optional int32 instanceID = 4;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->instanceid(), output);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 6;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transform_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 hitpoint = 7;
  if (has_hitpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->hitpoint_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
}

::google::protobuf::uint8* MainCamera::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional int32 layer = 3;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->layer(), target);
  }

  // optional int32 instanceID = 4;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->instanceid(), target);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 6;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->transform_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 hitpoint = 7;
  if (has_hitpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->hitpoint_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  return target;
}

size_t MainCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 layer = 3;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 instanceID = 4;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // optional string tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 6;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 hitpoint = 7;
    if (has_hitpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hitpoint_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainCamera::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MainCamera* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainCamera>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
    UnsafeMergeFrom(*source);
  }
}

void MainCamera::MergeFrom(const MainCamera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MainCamera::UnsafeMergeFrom(const MainCamera& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_tag()) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (from.has_transform()) {
      mutable_transform()->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::MergeFrom(from.transform());
    }
    if (from.has_hitpoint()) {
      mutable_hitpoint()->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::MergeFrom(from.hitpoint());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MainCamera::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCamera::CopyFrom(const MainCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MainCamera::IsInitialized() const {

  return true;
}

void MainCamera::Swap(MainCamera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainCamera::InternalSwap(MainCamera* other) {
  name_.Swap(&other->name_);
  std::swap(active_, other->active_);
  std::swap(layer_, other->layer_);
  std::swap(instanceid_, other->instanceid_);
  tag_.Swap(&other->tag_);
  std::swap(transform_, other->transform_);
  std::swap(hitpoint_, other->hitpoint_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainCamera_descriptor_;
  metadata.reflection = MainCamera_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MainCamera

// optional string name = 1;
bool MainCamera::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MainCamera::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MainCamera::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MainCamera::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MainCamera::name() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainCamera::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
}
void MainCamera::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
}
void MainCamera::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
}
::std::string* MainCamera::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MainCamera::release_name() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainCamera::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.name)
}

// optional bool active = 2;
bool MainCamera::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MainCamera::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
void MainCamera::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void MainCamera::clear_active() {
  active_ = false;
  clear_has_active();
}
bool MainCamera::active() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.active)
  return active_;
}
void MainCamera::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.active)
}

// optional int32 layer = 3;
bool MainCamera::has_layer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MainCamera::set_has_layer() {
  _has_bits_[0] |= 0x00000004u;
}
void MainCamera::clear_has_layer() {
  _has_bits_[0] &= ~0x00000004u;
}
void MainCamera::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
::google::protobuf::int32 MainCamera::layer() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.layer)
  return layer_;
}
void MainCamera::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.layer)
}

// optional int32 instanceID = 4;
bool MainCamera::has_instanceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MainCamera::set_has_instanceid() {
  _has_bits_[0] |= 0x00000008u;
}
void MainCamera::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000008u;
}
void MainCamera::clear_instanceid() {
  instanceid_ = 0;
  clear_has_instanceid();
}
::google::protobuf::int32 MainCamera::instanceid() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.instanceID)
  return instanceid_;
}
void MainCamera::set_instanceid(::google::protobuf::int32 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.instanceID)
}

// optional string tag = 5;
bool MainCamera::has_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MainCamera::set_has_tag() {
  _has_bits_[0] |= 0x00000010u;
}
void MainCamera::clear_has_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
void MainCamera::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& MainCamera::tag() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainCamera::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
}
void MainCamera::set_tag(const char* value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
}
void MainCamera::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
}
::std::string* MainCamera::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MainCamera::release_tag() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MainCamera::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.tag)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 6;
bool MainCamera::has_transform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MainCamera::set_has_transform() {
  _has_bits_[0] |= 0x00000020u;
}
void MainCamera::clear_has_transform() {
  _has_bits_[0] &= ~0x00000020u;
}
void MainCamera::clear_transform() {
  if (transform_ != NULL) transform_->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::Clear();
  clear_has_transform();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform& MainCamera::transform() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.transform)
  return transform_ != NULL ? *transform_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* MainCamera::mutable_transform() {
  set_has_transform();
  if (transform_ == NULL) {
    transform_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.transform)
  return transform_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* MainCamera::release_transform() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.transform)
  clear_has_transform();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void MainCamera::set_allocated_transform(::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    set_has_transform();
  } else {
    clear_has_transform();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.transform)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Vector3 hitpoint = 7;
bool MainCamera::has_hitpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MainCamera::set_has_hitpoint() {
  _has_bits_[0] |= 0x00000040u;
}
void MainCamera::clear_has_hitpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
void MainCamera::clear_hitpoint() {
  if (hitpoint_ != NULL) hitpoint_->::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::Clear();
  clear_has_hitpoint();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3& MainCamera::hitpoint() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.hitpoint)
  return hitpoint_ != NULL ? *hitpoint_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* MainCamera::mutable_hitpoint() {
  set_has_hitpoint();
  if (hitpoint_ == NULL) {
    hitpoint_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.hitpoint)
  return hitpoint_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* MainCamera::release_hitpoint() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.hitpoint)
  clear_has_hitpoint();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* temp = hitpoint_;
  hitpoint_ = NULL;
  return temp;
}
void MainCamera::set_allocated_hitpoint(::MSAnalyzer::MOSKIT_UNITY_LIB::Vector3* hitpoint) {
  delete hitpoint_;
  hitpoint_ = hitpoint;
  if (hitpoint) {
    set_has_hitpoint();
  } else {
    clear_has_hitpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera.hitpoint)
}

inline const MainCamera* MainCamera::internal_default_instance() {
  return &MainCamera_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kDeltaTimeFieldNumber;
const int Time::kFrameCountFieldNumber;
const int Time::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&deltatime_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&deltatime_) + sizeof(time_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Time> Time_default_instance_;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Time, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Time*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deltatime_, time_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float deltaTime = 1;
      case 1: {
        if (tag == 13) {
          set_has_deltatime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deltatime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frameCount;
        break;
      }

      // optional int32 frameCount = 2;
      case 2: {
        if (tag == 16) {
         parse_frameCount:
          set_has_framecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_time;
        break;
      }

      // optional float time = 3;
      case 3: {
        if (tag == 29) {
         parse_time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  // optional float deltaTime = 1;
  if (has_deltatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->deltatime(), output);
  }

  // optional int32 frameCount = 2;
  if (has_framecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->framecount(), output);
  }

  // optional float time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  // optional float deltaTime = 1;
  if (has_deltatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->deltatime(), target);
  }

  // optional int32 frameCount = 2;
  if (has_framecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->framecount(), target);
  }

  // optional float time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float deltaTime = 1;
    if (has_deltatime()) {
      total_size += 1 + 4;
    }

    // optional int32 frameCount = 2;
    if (has_framecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framecount());
    }

    // optional float time = 3;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
    UnsafeMergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Time::UnsafeMergeFrom(const Time& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deltatime()) {
      set_deltatime(from.deltatime());
    }
    if (from.has_framecount()) {
      set_framecount(from.framecount());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Time)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(deltatime_, other->deltatime_);
  std::swap(framecount_, other->framecount_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional float deltaTime = 1;
bool Time::has_deltatime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Time::set_has_deltatime() {
  _has_bits_[0] |= 0x00000001u;
}
void Time::clear_has_deltatime() {
  _has_bits_[0] &= ~0x00000001u;
}
void Time::clear_deltatime() {
  deltatime_ = 0;
  clear_has_deltatime();
}
float Time::deltatime() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Time.deltaTime)
  return deltatime_;
}
void Time::set_deltatime(float value) {
  set_has_deltatime();
  deltatime_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Time.deltaTime)
}

// optional int32 frameCount = 2;
bool Time::has_framecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Time::set_has_framecount() {
  _has_bits_[0] |= 0x00000002u;
}
void Time::clear_has_framecount() {
  _has_bits_[0] &= ~0x00000002u;
}
void Time::clear_framecount() {
  framecount_ = 0;
  clear_has_framecount();
}
::google::protobuf::int32 Time::framecount() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Time.frameCount)
  return framecount_;
}
void Time::set_framecount(::google::protobuf::int32 value) {
  set_has_framecount();
  framecount_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Time.frameCount)
}

// optional float time = 3;
bool Time::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Time::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Time::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Time::clear_time() {
  time_ = 0;
  clear_has_time();
}
float Time::time() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Time.time)
  return time_;
}
void Time::set_time(float value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Time.time)
}

inline const Time* Time::internal_default_instance() {
  return &Time_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameObject::kNameFieldNumber;
const int GameObject::kActiveFieldNumber;
const int GameObject::kIsStaticFieldNumber;
const int GameObject::kLayerFieldNumber;
const int GameObject::kInstanceIDFieldNumber;
const int GameObject::kTagFieldNumber;
const int GameObject::kTransformFieldNumber;
const int GameObject::kStrTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameObject::GameObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
}

void GameObject::InitAsDefaultInstance() {
  transform_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::internal_default_instance());
}

GameObject::GameObject(const GameObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
}

void GameObject::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transform_ = NULL;
  ::memset(&active_, 0, reinterpret_cast<char*>(&instanceid_) -
    reinterpret_cast<char*>(&active_) + sizeof(instanceid_));
}

GameObject::~GameObject() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  SharedDtor();
}

void GameObject::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &GameObject_default_instance_.get()) {
    delete transform_;
  }
}

void GameObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameObject_descriptor_;
}

const GameObject& GameObject::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameObject> GameObject_default_instance_;

GameObject* GameObject::New(::google::protobuf::Arena* arena) const {
  GameObject* n = new GameObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameObject::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameObject, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameObject*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(active_, instanceid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tag()) {
      tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_transform()) {
      if (transform_ != NULL) transform_->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::Clear();
    }
    if (has_strtype()) {
      strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (tag == 16) {
         parse_active:
          set_has_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isStatic;
        break;
      }

      // optional bool isStatic = 3;
      case 3: {
        if (tag == 24) {
         parse_isStatic:
          set_has_isstatic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstatic_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (tag == 32) {
         parse_layer:
          set_has_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_instanceID;
        break;
      }

      // optional int32 instanceID = 5;
      case 5: {
        if (tag == 40) {
         parse_instanceID:
          set_has_instanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tag;
        break;
      }

      // optional string tag = 6;
      case 6: {
        if (tag == 50) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transform;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 7;
      case 7: {
        if (tag == 58) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_strType;
        break;
      }

      // optional string strType = 8;
      case 8: {
        if (tag == 66) {
         parse_strType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strtype().data(), this->strtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  return false;
#undef DO_
}

void GameObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional bool isStatic = 3;
  if (has_isstatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isstatic(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  // optional int32 instanceID = 5;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instanceid(), output);
  }

  // optional string tag = 6;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tag(), output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 7;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transform_, output);
  }

  // optional string strType = 8;
  if (has_strtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strtype().data(), this->strtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->strtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
}

::google::protobuf::uint8* GameObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional bool isStatic = 3;
  if (has_isstatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isstatic(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  // optional int32 instanceID = 5;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->instanceid(), target);
  }

  // optional string tag = 6;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tag(), target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 7;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->transform_, false, target);
  }

  // optional string strType = 8;
  if (has_strtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strtype().data(), this->strtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  return target;
}

size_t GameObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional bool isStatic = 3;
    if (has_isstatic()) {
      total_size += 1 + 1;
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 instanceID = 5;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // optional string tag = 6;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 7;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transform_);
    }

    // optional string strType = 8;
    if (has_strtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strtype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
    UnsafeMergeFrom(*source);
  }
}

void GameObject::MergeFrom(const GameObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameObject::UnsafeMergeFrom(const GameObject& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_isstatic()) {
      set_isstatic(from.isstatic());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_tag()) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (from.has_transform()) {
      mutable_transform()->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::MergeFrom(from.transform());
    }
    if (from.has_strtype()) {
      set_has_strtype();
      strtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtype_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void GameObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameObject::CopyFrom(const GameObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameObject::IsInitialized() const {

  return true;
}

void GameObject::Swap(GameObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameObject::InternalSwap(GameObject* other) {
  name_.Swap(&other->name_);
  std::swap(active_, other->active_);
  std::swap(isstatic_, other->isstatic_);
  std::swap(layer_, other->layer_);
  std::swap(instanceid_, other->instanceid_);
  tag_.Swap(&other->tag_);
  std::swap(transform_, other->transform_);
  strtype_.Swap(&other->strtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameObject_descriptor_;
  metadata.reflection = GameObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameObject

// optional string name = 1;
bool GameObject::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameObject::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void GameObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameObject::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& GameObject::name() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
}
void GameObject::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
}
void GameObject::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
}
::std::string* GameObject::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameObject::release_name() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.name)
}

// optional bool active = 2;
bool GameObject::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameObject::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
void GameObject::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameObject::clear_active() {
  active_ = false;
  clear_has_active();
}
bool GameObject::active() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.active)
  return active_;
}
void GameObject::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.active)
}

// optional bool isStatic = 3;
bool GameObject::has_isstatic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameObject::set_has_isstatic() {
  _has_bits_[0] |= 0x00000004u;
}
void GameObject::clear_has_isstatic() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameObject::clear_isstatic() {
  isstatic_ = false;
  clear_has_isstatic();
}
bool GameObject::isstatic() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.isStatic)
  return isstatic_;
}
void GameObject::set_isstatic(bool value) {
  set_has_isstatic();
  isstatic_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.isStatic)
}

// optional int32 layer = 4;
bool GameObject::has_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameObject::set_has_layer() {
  _has_bits_[0] |= 0x00000008u;
}
void GameObject::clear_has_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameObject::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
::google::protobuf::int32 GameObject::layer() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.layer)
  return layer_;
}
void GameObject::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.layer)
}

// optional int32 instanceID = 5;
bool GameObject::has_instanceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameObject::set_has_instanceid() {
  _has_bits_[0] |= 0x00000010u;
}
void GameObject::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameObject::clear_instanceid() {
  instanceid_ = 0;
  clear_has_instanceid();
}
::google::protobuf::int32 GameObject::instanceid() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.instanceID)
  return instanceid_;
}
void GameObject::set_instanceid(::google::protobuf::int32 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.instanceID)
}

// optional string tag = 6;
bool GameObject::has_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameObject::set_has_tag() {
  _has_bits_[0] |= 0x00000020u;
}
void GameObject::clear_has_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameObject::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& GameObject::tag() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
  return tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
}
void GameObject::set_tag(const char* value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
}
void GameObject::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
}
::std::string* GameObject::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameObject::release_tag() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.tag)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Transform transform = 7;
bool GameObject::has_transform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameObject::set_has_transform() {
  _has_bits_[0] |= 0x00000040u;
}
void GameObject::clear_has_transform() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameObject::clear_transform() {
  if (transform_ != NULL) transform_->::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::Clear();
  clear_has_transform();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform& GameObject::transform() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.transform)
  return transform_ != NULL ? *transform_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Transform::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* GameObject::mutable_transform() {
  set_has_transform();
  if (transform_ == NULL) {
    transform_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.transform)
  return transform_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* GameObject::release_transform() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.transform)
  clear_has_transform();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void GameObject::set_allocated_transform(::MSAnalyzer::MOSKIT_UNITY_LIB::Transform* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    set_has_transform();
  } else {
    clear_has_transform();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.transform)
}

// optional string strType = 8;
bool GameObject::has_strtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameObject::set_has_strtype() {
  _has_bits_[0] |= 0x00000080u;
}
void GameObject::clear_has_strtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameObject::clear_strtype() {
  strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strtype();
}
const ::std::string& GameObject::strtype() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
  return strtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_strtype(const ::std::string& value) {
  set_has_strtype();
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
}
void GameObject::set_strtype(const char* value) {
  set_has_strtype();
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
}
void GameObject::set_strtype(const char* value, size_t size) {
  set_has_strtype();
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
}
::std::string* GameObject::mutable_strtype() {
  set_has_strtype();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
  return strtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameObject::release_strtype() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
  clear_has_strtype();
  return strtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameObject::set_allocated_strtype(::std::string* strtype) {
  if (strtype != NULL) {
    set_has_strtype();
  } else {
    clear_has_strtype();
  }
  strtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtype);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.GameObject.strType)
}

inline const GameObject* GameObject::internal_default_instance() {
  return &GameObject_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kStrIndicateFieldNumber;
const int Scene::kTimeFieldNumber;
const int Scene::kCameraFieldNumber;
const int Scene::kListGameObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
}

void Scene::InitAsDefaultInstance() {
  time_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::Time*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::Time::internal_default_instance());
  camera_ = const_cast< ::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera*>(
      ::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera::internal_default_instance());
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  strindicate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  camera_ = NULL;
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  strindicate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Scene_default_instance_.get()) {
    delete time_;
    delete camera_;
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Scene> Scene_default_instance_;

Scene* Scene::New(::google::protobuf::Arena* arena) const {
  Scene* n = new Scene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_strindicate()) {
      strindicate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_time()) {
      if (time_ != NULL) time_->::MSAnalyzer::MOSKIT_UNITY_LIB::Time::Clear();
    }
    if (has_camera()) {
      if (camera_ != NULL) camera_->::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera::Clear();
    }
  }
  list_gameobject_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strIndicate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strindicate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strindicate().data(), this->strindicate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Time time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Camera;
        break;
      }

      // optional .MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera Camera = 3;
      case 3: {
        if (tag == 26) {
         parse_Camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_gameObject;
        break;
      }

      // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_gameObject = 4;
      case 4: {
        if (tag == 34) {
         parse_list_gameObject:
          DO_(input->IncrementRecursionDepth());
         parse_loop_list_gameObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list_gameobject()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_list_gameObject;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  // optional string strIndicate = 1;
  if (has_strindicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strindicate().data(), this->strindicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strindicate(), output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Time time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_, output);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera Camera = 3;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->camera_, output);
  }

  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_gameObject = 4;
  for (unsigned int i = 0, n = this->list_gameobject_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_gameobject(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
}

::google::protobuf::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  // optional string strIndicate = 1;
  if (has_strindicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strindicate().data(), this->strindicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strindicate(), target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Time time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_, false, target);
  }

  // optional .MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera Camera = 3;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->camera_, false, target);
  }

  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_gameObject = 4;
  for (unsigned int i = 0, n = this->list_gameobject_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->list_gameobject(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string strIndicate = 1;
    if (has_strindicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strindicate());
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.Time time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_);
    }

    // optional .MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera Camera = 3;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->camera_);
    }

  }
  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_gameObject = 4;
  {
    unsigned int count = this->list_gameobject_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_gameobject(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Scene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
    UnsafeMergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Scene::UnsafeMergeFrom(const Scene& from) {
  GOOGLE_DCHECK(&from != this);
  list_gameobject_.MergeFrom(from.list_gameobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strindicate()) {
      set_has_strindicate();
      strindicate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strindicate_);
    }
    if (from.has_time()) {
      mutable_time()->::MSAnalyzer::MOSKIT_UNITY_LIB::Time::MergeFrom(from.time());
    }
    if (from.has_camera()) {
      mutable_camera()->::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera::MergeFrom(from.camera());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.Scene)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Scene::IsInitialized() const {

  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  strindicate_.Swap(&other->strindicate_);
  std::swap(time_, other->time_);
  std::swap(camera_, other->camera_);
  list_gameobject_.UnsafeArenaSwap(&other->list_gameobject_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scene

// optional string strIndicate = 1;
bool Scene::has_strindicate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scene::set_has_strindicate() {
  _has_bits_[0] |= 0x00000001u;
}
void Scene::clear_has_strindicate() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scene::clear_strindicate() {
  strindicate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strindicate();
}
const ::std::string& Scene::strindicate() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
  return strindicate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scene::set_strindicate(const ::std::string& value) {
  set_has_strindicate();
  strindicate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
}
void Scene::set_strindicate(const char* value) {
  set_has_strindicate();
  strindicate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
}
void Scene::set_strindicate(const char* value, size_t size) {
  set_has_strindicate();
  strindicate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
}
::std::string* Scene::mutable_strindicate() {
  set_has_strindicate();
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
  return strindicate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scene::release_strindicate() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
  clear_has_strindicate();
  return strindicate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scene::set_allocated_strindicate(::std::string* strindicate) {
  if (strindicate != NULL) {
    set_has_strindicate();
  } else {
    clear_has_strindicate();
  }
  strindicate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strindicate);
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.strIndicate)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.Time time = 2;
bool Scene::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scene::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Scene::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scene::clear_time() {
  if (time_ != NULL) time_->::MSAnalyzer::MOSKIT_UNITY_LIB::Time::Clear();
  clear_has_time();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Time& Scene::time() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.time)
  return time_ != NULL ? *time_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::Time::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Time* Scene::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::Time;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.time)
  return time_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Time* Scene::release_time() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.time)
  clear_has_time();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void Scene::set_allocated_time(::MSAnalyzer::MOSKIT_UNITY_LIB::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.time)
}

// optional .MSAnalyzer.MOSKIT_UNITY_LIB.MainCamera Camera = 3;
bool Scene::has_camera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scene::set_has_camera() {
  _has_bits_[0] |= 0x00000004u;
}
void Scene::clear_has_camera() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scene::clear_camera() {
  if (camera_ != NULL) camera_->::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera::Clear();
  clear_has_camera();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera& Scene::camera() const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.Camera)
  return camera_ != NULL ? *camera_
                         : *::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera::internal_default_instance();
}
::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera* Scene::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) {
    camera_ = new ::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera;
  }
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.Camera)
  return camera_;
}
::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera* Scene::release_camera() {
  // @@protoc_insertion_point(field_release:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.Camera)
  clear_has_camera();
  ::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera* temp = camera_;
  camera_ = NULL;
  return temp;
}
void Scene::set_allocated_camera(::MSAnalyzer::MOSKIT_UNITY_LIB::MainCamera* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.Camera)
}

// repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_gameObject = 4;
int Scene::list_gameobject_size() const {
  return list_gameobject_.size();
}
void Scene::clear_list_gameobject() {
  list_gameobject_.Clear();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject& Scene::list_gameobject(int index) const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.list_gameObject)
  return list_gameobject_.Get(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject* Scene::mutable_list_gameobject(int index) {
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.list_gameObject)
  return list_gameobject_.Mutable(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject* Scene::add_list_gameobject() {
  // @@protoc_insertion_point(field_add:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.list_gameObject)
  return list_gameobject_.Add();
}
::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject >*
Scene::mutable_list_gameobject() {
  // @@protoc_insertion_point(field_mutable_list:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.list_gameObject)
  return &list_gameobject_;
}
const ::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject >&
Scene::list_gameobject() const {
  // @@protoc_insertion_point(field_list:MSAnalyzer.MOSKIT_UNITY_LIB.Scene.list_gameObject)
  return list_gameobject_;
}

inline const Scene* Scene::internal_default_instance() {
  return &Scene_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultAnalysis::kListObjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultAnalysis::ResultAnalysis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
}

void ResultAnalysis::InitAsDefaultInstance() {
}

ResultAnalysis::ResultAnalysis(const ResultAnalysis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
}

void ResultAnalysis::SharedCtor() {
  _cached_size_ = 0;
}

ResultAnalysis::~ResultAnalysis() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  SharedDtor();
}

void ResultAnalysis::SharedDtor() {
}

void ResultAnalysis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultAnalysis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultAnalysis_descriptor_;
}

const ResultAnalysis& ResultAnalysis::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResultAnalysis> ResultAnalysis_default_instance_;

ResultAnalysis* ResultAnalysis::New(::google::protobuf::Arena* arena) const {
  ResultAnalysis* n = new ResultAnalysis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultAnalysis::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  list_obj_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResultAnalysis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_obj = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list_obj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list_obj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list_obj;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  return false;
#undef DO_
}

void ResultAnalysis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_obj = 1;
  for (unsigned int i = 0, n = this->list_obj_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_obj(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
}

::google::protobuf::uint8* ResultAnalysis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_obj = 1;
  for (unsigned int i = 0, n = this->list_obj_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list_obj(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  return target;
}

size_t ResultAnalysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  size_t total_size = 0;

  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_obj = 1;
  {
    unsigned int count = this->list_obj_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_obj(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultAnalysis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResultAnalysis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultAnalysis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
    UnsafeMergeFrom(*source);
  }
}

void ResultAnalysis::MergeFrom(const ResultAnalysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResultAnalysis::UnsafeMergeFrom(const ResultAnalysis& from) {
  GOOGLE_DCHECK(&from != this);
  list_obj_.MergeFrom(from.list_obj_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ResultAnalysis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultAnalysis::CopyFrom(const ResultAnalysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResultAnalysis::IsInitialized() const {

  return true;
}

void ResultAnalysis::Swap(ResultAnalysis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultAnalysis::InternalSwap(ResultAnalysis* other) {
  list_obj_.UnsafeArenaSwap(&other->list_obj_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultAnalysis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultAnalysis_descriptor_;
  metadata.reflection = ResultAnalysis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultAnalysis

// repeated .MSAnalyzer.MOSKIT_UNITY_LIB.GameObject list_obj = 1;
int ResultAnalysis::list_obj_size() const {
  return list_obj_.size();
}
void ResultAnalysis::clear_list_obj() {
  list_obj_.Clear();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject& ResultAnalysis::list_obj(int index) const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis.list_obj)
  return list_obj_.Get(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject* ResultAnalysis::mutable_list_obj(int index) {
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis.list_obj)
  return list_obj_.Mutable(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject* ResultAnalysis::add_list_obj() {
  // @@protoc_insertion_point(field_add:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis.list_obj)
  return list_obj_.Add();
}
::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject >*
ResultAnalysis::mutable_list_obj() {
  // @@protoc_insertion_point(field_mutable_list:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis.list_obj)
  return &list_obj_;
}
const ::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::GameObject >&
ResultAnalysis::list_obj() const {
  // @@protoc_insertion_point(field_list:MSAnalyzer.MOSKIT_UNITY_LIB.ResultAnalysis.list_obj)
  return list_obj_;
}

inline const ResultAnalysis* ResultAnalysis::internal_default_instance() {
  return &ResultAnalysis_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrayScene::kListSceneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrayScene::ArrayScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_moskit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
}

void ArrayScene::InitAsDefaultInstance() {
}

ArrayScene::ArrayScene(const ArrayScene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
}

void ArrayScene::SharedCtor() {
  _cached_size_ = 0;
}

ArrayScene::~ArrayScene() {
  // @@protoc_insertion_point(destructor:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  SharedDtor();
}

void ArrayScene::SharedDtor() {
}

void ArrayScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrayScene_descriptor_;
}

const ArrayScene& ArrayScene::default_instance() {
  protobuf_InitDefaults_moskit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ArrayScene> ArrayScene_default_instance_;

ArrayScene* ArrayScene::New(::google::protobuf::Arena* arena) const {
  ArrayScene* n = new ArrayScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArrayScene::Clear() {
// @@protoc_insertion_point(message_clear_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  list_scene_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ArrayScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.Scene list_Scene = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_list_Scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list_scene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_list_Scene;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  return false;
#undef DO_
}

void ArrayScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.Scene list_Scene = 1;
  for (unsigned int i = 0, n = this->list_scene_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_scene(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
}

::google::protobuf::uint8* ArrayScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.Scene list_Scene = 1;
  for (unsigned int i = 0, n = this->list_scene_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->list_scene(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  return target;
}

size_t ArrayScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  size_t total_size = 0;

  // repeated .MSAnalyzer.MOSKIT_UNITY_LIB.Scene list_Scene = 1;
  {
    unsigned int count = this->list_scene_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_scene(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ArrayScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArrayScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
    UnsafeMergeFrom(*source);
  }
}

void ArrayScene::MergeFrom(const ArrayScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ArrayScene::UnsafeMergeFrom(const ArrayScene& from) {
  GOOGLE_DCHECK(&from != this);
  list_scene_.MergeFrom(from.list_scene_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ArrayScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayScene::CopyFrom(const ArrayScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ArrayScene::IsInitialized() const {

  return true;
}

void ArrayScene::Swap(ArrayScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArrayScene::InternalSwap(ArrayScene* other) {
  list_scene_.UnsafeArenaSwap(&other->list_scene_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArrayScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArrayScene_descriptor_;
  metadata.reflection = ArrayScene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArrayScene

// repeated .MSAnalyzer.MOSKIT_UNITY_LIB.Scene list_Scene = 1;
int ArrayScene::list_scene_size() const {
  return list_scene_.size();
}
void ArrayScene::clear_list_scene() {
  list_scene_.Clear();
}
const ::MSAnalyzer::MOSKIT_UNITY_LIB::Scene& ArrayScene::list_scene(int index) const {
  // @@protoc_insertion_point(field_get:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene.list_Scene)
  return list_scene_.Get(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Scene* ArrayScene::mutable_list_scene(int index) {
  // @@protoc_insertion_point(field_mutable:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene.list_Scene)
  return list_scene_.Mutable(index);
}
::MSAnalyzer::MOSKIT_UNITY_LIB::Scene* ArrayScene::add_list_scene() {
  // @@protoc_insertion_point(field_add:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene.list_Scene)
  return list_scene_.Add();
}
::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::Scene >*
ArrayScene::mutable_list_scene() {
  // @@protoc_insertion_point(field_mutable_list:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene.list_Scene)
  return &list_scene_;
}
const ::google::protobuf::RepeatedPtrField< ::MSAnalyzer::MOSKIT_UNITY_LIB::Scene >&
ArrayScene::list_scene() const {
  // @@protoc_insertion_point(field_list:MSAnalyzer.MOSKIT_UNITY_LIB.ArrayScene.list_Scene)
  return list_scene_;
}

inline const ArrayScene* ArrayScene::internal_default_instance() {
  return &ArrayScene_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MOSKIT_UNITY_LIB
}  // namespace MSAnalyzer

// @@protoc_insertion_point(global_scope)
